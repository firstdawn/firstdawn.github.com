---
layout: post
category : blog
tagline: by:日志
---
{% include JB/setup %}

  此文仅用于日后给自己拾遗。
  ICE（Internet Communications Engine）简介：Ice 是一种面向对象的中间件平台。下图为ICE客户与服务器内部逻辑结构：
![](http://1812.img.pp.sohu.com.cn/images/blog/2012/9/10/13/2/u251673670_13a72890cbfg85_blog.jpg)

  SCE简介：SCE系统是我的搜狐下一代服务通信中间件，基于ICE，Protocol Buffer和Zookeeper的自动路由的分布式通信系统。      

   Protocol Buffer是一种数据序列化传输的格式。- <http://code.google.com/p/protobuf/>个人认为Protocol Buffer用起来的简易程度到不怎么样，需要学习Protocol Buffer的语法：Message,枚举，嵌套等等。没有XML，json这种看起来简洁，要是看不到定义的.proto文件，只有Protocol Buffer编译器生成的.java文件，简单的数据结构还好，如果是嵌套了很多层的比较复杂的数据结构仅依靠自动生成的.java来梳理数据的逻辑那真是要吐血！

Protocol Buffer的亮点就在于独特的编码方式，官网上有一个对varint 300的系列化过程-<https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-CN>，
简单来讲就是最高位来区别是不是还有下一个字节，然后再一顿交换就能算出是300。

这种编码方式能节省存储空间，进而提升了序列化的效率，其实这么多的序列化技术，好不好主要就看效率高不高，编码解码的效率高了，传输的数据自然就快的飞起。

##1.SCE工程建立流程：

总的来说分4个项目（引用涛哥的教学项目，这个项目很清晰）:
![](http://1882.img.pp.sohu.com.cn/images/blog/2012/9/10/0/23/u251673670_13a6fb5f92cg86_blog.jpg)

   先从protobuf说起，建立个需要传输的数据结构的proto文件，
{% capture text %}
package codemsg;

option java_package = "sce.proto.codemsg";
option java_outer_classname = "CodeMsgs";

message CodeMsg {
   required sint32 code =1 [default=0];
   required string msg =2 [default=""];
}{% endcapture %}
{% include JB/liquid_raw %}

  然后用proto编译器proto –java_out一下就生成出.java文件。


##2. 编写Slice定义

  这个过程就对应图片上的slice文件夹，用slice语言定义出所要建立的应用的各个接口：
{% capture text %}
#ifndef HELLO_ICE
#define HELLO_ICE
module sce {
  module slice {
   module hello {
   ["java:protobuf:sce.proto.codemsg.CodeMsgs.CodeMsg"] sequence<byte> PbCodeMsg;
    interface HelloService {

                PbCodeMsg sayHello(int code,string hello);

          }; //interface over

     };
   };
};

#endif
{% endcapture %}
{% include JB/liquid_raw %}


   这时候建议在eclipse上安装slice2java的插件，用slice2java生成相应的接口文件.
 ![](http://1832.img.pp.sohu.com.cn/images/blog/2012/9/10/0/25/u251673670_13a6fb7f101g85_blog.jpg) 

前四个文件是为服务器端准备的，~Disp.java是服务器骨架类的定义，在编写服务器端代码时需继承这个类，实现各个接口的功能。

~Del.java、~DelD.java、~DelM.java这三个文件包含的是供java映射内部使用的代码；它们包含的功能与应用程序员无关，无需过多关注。

其他文件供客户端使用，也就是adapter中会有调用。

~Holder.java、~HolderPrx.java为接口或接口的代理定义接口类型。

~Prx.java、~PrxHelper.java 定义代理接口、代理接口的帮助类。

~Operations.java 里面的操作与Slice的定义文件相对应。


##3. 编写服务器程序

   HelloServiceI.java,写成~I.java据说是编写ICE服务器的习惯，这个类继承服务器的骨架类~Disp.java，实现ice中接口定义的各个方法。

   HelloServer.java,main()函数中实现SCE服务器，在try块中含有实际的服务器代码。

- 调用Ice.Util.initialize 初始化Ice run time ，可能接收一些命令行参数。返回Ice.Communicator

- 调用Communicator 实例上的创建适配器方法ic.createObjectAdapterWithEndpoints("Hello", "default -p " + port),传入适配器名"Hello",缺省协议（TCP/IP）和端口号来监听客户端的请求。

- 创建一个实例化对象HelloServerI()。(在ICE中这种实例化对象被称为servant)。

- 调用适配器方法add，传入刚才的servant，并加上一个标示符"Hello"对应(b)中传入的适配器名。

- 激活适配器，一旦适配器被激活，适配器上所有的servant会开始处理来自客户端请求。（目前只对adapter只有一个servant的情况作过实验）。

- 调用ic.waitForShutdown()，挂起发出调用的线程，直到服务器终止。


##4. 编写客户端adapter

  通常的adapter继承SCE中的BaseAdapter 实现一个与服务端提供的服务相对应的接口，形式如HelloServiceAdapter extends BaseAdapter implements IHelloService。BaseAdapter 是架构组封装一些ICE操作的公共服务适配器，初始化ICE的连接配置、获取对象代理和对ICE通信器初始化、销毁操作。

- 调用代理帮助类的方法checkedCast或者uncheckedCast来获取服务。传入和服务端对应的适配器名"Hello"和超时时间来获取服务。checkedCast与uncheckedCast都是向下转型，区别在于前者联系服务器，因为只有服务器的代理实现才确切知道某个对象的类型，可能会抛出连接超时或者对象不存在ConnectTimeoutException 、ObjectNotExistException异常，后者则不会联系服务器，如果类型失配，在后续操作中可能引发操作不存在OperationNotExistException的异常。

- 获取到代理对象后，就可以随心所欲调用该对象的方法了，任务就完成了。


{% capture text %}
public String sayHello() {

return getAccountService().sayHello(1, "hello suc").getMsg();

}
{% endcapture %}
{% include JB/liquid_raw %}