---
layout: post
category : blog
tagline: by:日志
---
{% include JB/setup %}

CometD是一个可扩展的基于HTTP实现comet的Ajax推送技术（随着更新也可以支持其他新兴的协议，比如Websocket）。

Ps:comet在此处的定义为：为浏览器提供低延迟数据（Low Latency Data）。


###丰富一下背景知识-Web交互的进化史（可跳过）


##著名的F5大法
今晚不好受，上次这种感觉还要追溯到初中，但是我确定已经不会再为原来那个她心潮澎湃，哪怕泛起一丝涟漪。之后我认为这辈子不会再有专属于小时候的冲动，因为我以为我长大了，但直到我遇到小乐，直到今天才又有这种很难讲出滋味的感觉。
初识小乐是在小学时期的英语班里，如今只有模糊的印象，脸红红的，挺土的，学习很认真，对人很真诚，我很喜欢，没事我会惹惹她，犯犯贱。
初中后不在一个英语班，但还在一所学校，我在二班，她在四班，没什么交集，而且我不会特意关注她，她也更不会关注我，慢慢的，没什么联系了。
很偶然，她的名字再次出现在我的人人的feed里，我一下子就定位到她，我很喜欢找小时候的朋友聊天，这样可以拾起很多回忆，所以我们算再次认识了，很可惜她不大记得我。。。
我们的话题越来越多，越来越没正题，越来越不正经，越来越热闹，她让我感觉很亲切，很放松，我也喜欢跟她不着边际吹牛的节奏。。。没事我会翻翻她的博客，记录的是大学到现在的点点滴滴，虽然有点装文艺，但很真实，比起那种强说愁的要不就极度展现自己修养和品位的文章，我更喜欢这种。
后来，我没事会找她聊天，她也会找我，我只认为她是为了排解一个人在大城市的无聊才会跟我扯皮的，但不想后来一次聊天，她想让我们确立关系我才明白，哦，原来她喜欢我，原来我也喜欢上了她。。。
从那天起，她是我女朋友，后来的聊天随之也越来越亲昵，我也发现我的一些潜质，比如说我居然会在电话里聊天，我居然会把生活的点滴分享给别人，还有我居然会说我爱你，而且没人逼我。
后来的话题集中在她是否来北京，纠结啊~  其实她能不能来北京我看的不是很重，心灵相通胜过一切，况且我们都才毕业，都还年轻有自己各自想做的事情，用不着为了现在就在一起放弃这么多。
这之前，都很和谐，但今天她把话题引到了初吻，初夜的话题。。。我没有初夜，她却有过，这只让我小不爽一下，到也没什么，但她又说这样不对等，让我尽快解决。。。然后我不知道说什么，我觉得我不大正常了，感觉有一群苍蝇飞到我喉咙里，堵在我心坎里，钻进我脑子里，浮现了各种肮脏的场景。
再后来我慢慢的消化了，苍蝇飞走了，但心里还是有种东西在，不是脏东西，很难讲出滋味的感觉，是真的喜欢一个人然后被她伤了一下才会有的感觉，不大好受诶，我知道我应该又陷进去了。
好吧，我跟你讲，我压根没有对不对等的概念，我更做不到尽快解决，我只会跟我真正爱的人解决，我要为我的行为负责，不知道这是成熟还是不成熟？
我没那么你想的那么自信，我的内心归根结底是懦弱的。

##Ajax
最初听到这个词很诧异，总能联想到荷甲球队，还以为这项技术是“灰翔的荷兰人”发明的，其实毛关系都没有--！~。

人家的全称是Asynchronous JavaScript and XML，异步 JavaScript 及 XML。听起来挺唬人的，其实也就那么回事。

所谓的异步其实就是JavaScript去完成像服务器request的工作，request的或许只是需要更新的数据比如说NBA的比分，而不必去更新整个页面（标题啊，广告啊，还有评论里各种科黑、科蜜关于C罗，煤球王的对喷…）。

- 轮询（polling）方式实现的Ajax,上j8。

![](http://1864.img.pp.sohu.com.cn/images/blog/2012/10/24/20/21/e716_13b5696fbaeg2_blog.jpg)

设定一个时间间隔不停的像服务器发起请求。

                   
比起F5大法，AJAX只像服务器获取少量数据，然而仍无法预知何时服务器上的数据会更新，仍然会发起大量无用的请求，大量的并发依然会使服务器压力巨大。请求来的数据只是忽略了轮询间隔时间的“实时”数据, 调整轮询的间隔时间就是在数据的实时性与服务器压力之间的权衡。

- 捎带轮询（piggyback polling），这个不能叫做第二代Ajax，充其量是1s。

![](http://1864.img.pp.sohu.com.cn/images/blog/2012/10/24/20/21/e716_13b5696fb7ag2_blog.jpg)

捎带轮询（piggyback polling）是一种比轮询“更加聪明”的做法，因为它会删除掉所有非必需的请求（没有返回数据的那些）。不存在时间间隔，客户端在需要的时候向服务器端发送请求。

上面的介绍是在网上截下来的，“更加聪明”实则可以认为是个贬义词。“客户端会在需要的时候向服务器发送请求”，然而服务器数据更新的行为客户端是根本无法预知的，有可能服务器累积在服务端的数据因客户端未能发送请求而无法响应给客户端，实时性因此完败给F5大法。

##Comet

Comet 技术可以实现主动向服务器推送数据。comet的优点在于它可以在任何时候向客户端发送数据，而不仅仅只是响应用户的输入请求。而发送数据是在一个已有的单连接上进行的。因此可以大大降低发送数据的延迟时间（建立connection的开销，以及客户端发送请求的等待时间）。
Comet技术在HTTP上有好多种实现方式，不全介绍。

- 长轮询Long-poling

![](http://1804.img.pp.sohu.com.cn/images/blog/2012/10/24/20/21/e716_13b5696fb1bg2_blog.jpg)

客户端发送给服务器的请求，如果服务器没有数据，可以一直由服务器hold住，直到服务端有数据才会响应给客户端。这样做明显减少了客户端的请求数，大大减少的服务器的压力，节省了带宽资源。更重要的是真正实现了又服务器向客户端push数据。

这种长轮询方式仍是基于HTTP，然而由于HTTP是面向无连接的，如果一次request直到到了超时时间服务器仍没有数据响应，连接就会断开。长轮询的实现原理相当于做了一个超时非常长的request并且在超时错误的代码中不断的执行自己，一旦接受到数据后再重新发起请求。


- 流（Streaming）

![](http://1804.img.pp.sohu.com.cn/images/blog/2012/10/24/20/21/e716_13b5696fc04g2_blog.jpg)

由下图可以看出客户端一旦建立连接，服务端就会给客户端猛推数据，客户端每次接收到数据不会释放连接或者再次发送请求。直到连接超时客户端会再次建立连接接收数据。






- Websocket
　　 WebSocket 是HTML5一种新的协议。基于TCP之上定义了帧协议。它是实现了浏览器与服务器的全双工通信。
    在 WebSocket API 中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。
